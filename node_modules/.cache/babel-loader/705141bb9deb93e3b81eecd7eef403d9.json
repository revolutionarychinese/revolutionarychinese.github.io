{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/dianjin/Documents/revolutionarychinese.github.io/src/words/words.js\";\nimport './words.css';\n\nfunction Word(prop) {\n  const style = \"covid\";\n  const single = props.simplified == props.traditional;\n  const length = props.simplified.length;\n  const suffix = single ? `single-${length}` : `${length}`;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    class: `container clear-space ${style}`,\n    id: \"word\",\n    children: [/*#__PURE__*/_jsxDEV(\"p\", {\n      class: `simp simp-margin-${suffix} text-size-${suffix}`,\n      children: props.simplified\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 10,\n      columnNumber: 4\n    }, this), !single ? /*#__PURE__*/_jsxDEV(\"p\", {\n      class: `comp comp-margin-${suffix} text-size-${suffix}`,\n      children: /*#__PURE__*/_jsxDEV(\"strong\", {\n        children: props.traditional\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 14,\n        columnNumber: 5\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 15\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 11\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      class: `width-${suffix}`,\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        class: \"pinyin\",\n        children: /*#__PURE__*/_jsxDEV(\"strong\", {\n          children: props.pinyin\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 21,\n          columnNumber: 6\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 20,\n        columnNumber: 5\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      class: `trans trans-margin-${suffix}`,\n      children: /*#__PURE__*/_jsxDEV(\"em\", {\n        children: props.trans\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 5\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 4\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 9,\n    columnNumber: 3\n  }, this);\n}\n\n_c = Word;\nsimp = [\"1\", \"2\"];\n\nfunction Words(props) {\n  var items = [];\n\n  for (const [index, value] of simp.entries()) {\n    items.push( /*#__PURE__*/_jsxDEV(Word, { ...props\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 4\n    }, this));\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: items\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 6\n  }, this);\n}\n\n_c2 = Words;\nexport default Words;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Word\");\n$RefreshReg$(_c2, \"Words\");","map":{"version":3,"sources":["/Users/dianjin/Documents/revolutionarychinese.github.io/src/words/words.js"],"names":["Word","prop","style","single","props","simplified","traditional","length","suffix","pinyin","trans","simp","Words","items","index","value","entries","push"],"mappings":";;AAAA,OAAO,aAAP;;AAEA,SAASA,IAAT,CAAcC,IAAd,EAAoB;AACnB,QAAMC,KAAK,GAAG,OAAd;AACA,QAAMC,MAAM,GAAGC,KAAK,CAACC,UAAN,IAAoBD,KAAK,CAACE,WAAzC;AACA,QAAMC,MAAM,GAAGH,KAAK,CAACC,UAAN,CAAiBE,MAAhC;AACA,QAAMC,MAAM,GAAGL,MAAM,GAAI,UAASI,MAAO,EAApB,GAAyB,GAAEA,MAAO,EAAvD;AACA,sBACC;AAAK,IAAA,KAAK,EAAG,yBAAwBL,KAAM,EAA3C;AAA8C,IAAA,EAAE,EAAC,MAAjD;AAAA,4BACC;AAAG,MAAA,KAAK,EAAG,oBAAmBM,MAAO,cAAaA,MAAO,EAAzD;AAAA,gBACEJ,KAAK,CAACC;AADR;AAAA;AAAA;AAAA;AAAA,YADD,EAIE,CAACF,MAAD,gBAAU;AAAG,MAAA,KAAK,EAAG,oBAAmBK,MAAO,cAAaA,MAAO,EAAzD;AAAA,6BACV;AAAA,kBACEJ,KAAK,CAACE;AADR;AAAA;AAAA;AAAA;AAAA;AADU;AAAA;AAAA;AAAA;AAAA,YAAV,gBAIM;AAAA;AAAA;AAAA;AAAA,YARR,eAUC;AAAK,MAAA,KAAK,EAAG,SAAQE,MAAO,EAA5B;AAAA,6BACC;AAAG,QAAA,KAAK,EAAC,QAAT;AAAA,+BACC;AAAA,oBACEJ,KAAK,CAACK;AADR;AAAA;AAAA;AAAA;AAAA;AADD;AAAA;AAAA;AAAA;AAAA;AADD;AAAA;AAAA;AAAA;AAAA,YAVD,eAiBC;AAAK,MAAA,KAAK,EAAG,sBAAqBD,MAAO,EAAzC;AAAA,6BACC;AAAA,kBACEJ,KAAK,CAACM;AADR;AAAA;AAAA;AAAA;AAAA;AADD;AAAA;AAAA;AAAA;AAAA,YAjBD;AAAA;AAAA;AAAA;AAAA;AAAA,UADD;AAyBA;;KA9BQV,I;AAgCTW,IAAI,GAAG,CAAC,GAAD,EAAM,GAAN,CAAP;;AAEA,SAASC,KAAT,CAAeR,KAAf,EAAsB;AACrB,MAAIS,KAAK,GAAG,EAAZ;;AACA,OAAK,MAAM,CAACC,KAAD,EAAQC,KAAR,CAAX,IAA6BJ,IAAI,CAACK,OAAL,EAA7B,EAA6C;AAC5CH,IAAAA,KAAK,CAACI,IAAN,eACC,QAAC,IAAD,OAAUb;AAAV;AAAA;AAAA;AAAA;AAAA,YADD;AAGA;;AACD,sBACI;AAAA,cACIS;AADJ;AAAA;AAAA;AAAA;AAAA,UADJ;AAKA;;MAZQD,K;AAcT,eAAeA,KAAf","sourcesContent":["import './words.css';\n\nfunction Word(prop) {\n\tconst style = \"covid\";\n\tconst single = props.simplified == props.traditional;\n\tconst length = props.simplified.length;\n\tconst suffix = single ? `single-${length}` : `${length}`;\n\treturn (\n\t\t<div class={`container clear-space ${style}`} id=\"word\">\n\t\t\t<p class={`simp simp-margin-${suffix} text-size-${suffix}`}>\n\t\t\t\t{props.simplified}\n\t\t\t</p>\n\t\t\t{!single ? <p class={`comp comp-margin-${suffix} text-size-${suffix}`}>\n\t\t\t\t<strong>\n\t\t\t\t\t{props.traditional}\n\t\t\t\t</strong>\n\t\t\t</p> : <div/>\n\t\t\t}\n\t\t\t<div class={`width-${suffix}`}>\n\t\t\t\t<p class=\"pinyin\">\n\t\t\t\t\t<strong>\n\t\t\t\t\t\t{props.pinyin}\n\t\t\t\t\t</strong>\n\t\t\t\t</p>\n\t\t\t</div>\n\t\t\t<div class={`trans trans-margin-${suffix}`}>\n\t\t\t\t<em>\n\t\t\t\t\t{props.trans}\n\t\t\t\t</em>\n\t\t\t</div>\n\t\t</div>\n\t);\n}\n\nsimp = [\"1\", \"2\"];\n\nfunction Words(props) {\n\tvar items = []\n\tfor (const [index, value] of simp.entries()) {\n\t\titems.push(\n\t\t\t<Word {...props}/>\n\t\t);\n\t}\n\treturn (\n    \t<div>\n      \t\t{items}\n    \t</div>\n  \t);\n}\n\nexport default Words;\n"]},"metadata":{},"sourceType":"module"}