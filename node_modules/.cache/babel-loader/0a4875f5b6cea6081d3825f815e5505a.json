{"ast":null,"code":"'use strict';\n\nconst fs = require('fs');\n\nconst path = require('path');\n\nconst dictionaries = require('../dist/dictionary.json');\n\nconst cachedDictionaries = {};\n\nfunction getDictionary(name, options = {}) {\n  const {\n    reverse\n  } = options;\n  let cacheName = reverse ? `R_${name}` : name;\n  let dictionary = cachedDictionaries[cacheName];\n  return dictionary || (cachedDictionaries[cacheName] = dictionaries[name].reduce((map, entry) => {\n    const first = options.reverse ? 1 : 0;\n    map[entry[first]] = entry[1 - first];\n    return map;\n  }, {}));\n}\n\nfunction convertChain(input, chains) {\n  return chains.reduce((input, chain) => {\n    const dictionaries = chain.slice();\n    dictionaries.splice(0, 0, {});\n    return translate(input, Object.assign.apply(null, dictionaries));\n  }, input);\n}\n\nexports.hongKongToSimplified = function (text) {\n  return convertChain(text, [[getDictionary('HKVariantsRevPhrases'), getDictionary('HKVariants', {\n    reverse: true\n  })], [getDictionary('TSPhrases'), getDictionary('TSCharacters')]]);\n};\n\nexports.simplifiedToHongKong = function (text) {\n  return convertChain(text, [[getDictionary('STPhrases'), getDictionary('STCharacters')], [getDictionary('HKVariantsPhrases'), getDictionary('HKVariants')]]);\n};\n\nexports.simplifiedToTraditional = function (text) {\n  return convertChain(text, [[getDictionary('STPhrases'), getDictionary('STCharacters')]]);\n};\n\nexports.simplifiedToTaiwan = function (text) {\n  return convertChain(text, [[getDictionary('STPhrases'), getDictionary('STCharacters')], [getDictionary('TWVariants')]]);\n};\n\nexports.simplifiedToTaiwanWithPhrases = function (text) {\n  return convertChain(text, [[getDictionary('STPhrases'), getDictionary('STCharacters')], [getDictionary('TWPhrasesIT'), getDictionary('TWPhrasesName'), getDictionary('TWPhrasesOther'), getDictionary('TWVariants')]]);\n};\n\nexports.traditionalToHongKong = function (text) {\n  return convertChain(text, [[getDictionary('HKVariants')]]);\n};\n\nexports.traditionalToSimplified = function (text) {\n  return convertChain(text, [[getDictionary('TSPhrases'), getDictionary('TSCharacters')]]);\n};\n\nexports.traditionalToTaiwan = function (text) {\n  return convertChain(text, [[getDictionary('TWVariants')]]);\n};\n\nexports.taiwanToSimplified = function (text) {\n  return convertChain(text, [[getDictionary('TWVariantsRevPhrases'), getDictionary('TWVariants', {\n    reverse: true\n  })], [getDictionary('TSPhrases'), getDictionary('TSCharacters')]]);\n};\n\nexports.taiwanToSimplifiedWithPhrases = function (text) {\n  return convertChain(text, [[getDictionary('TWVariantsRevPhrases'), getDictionary('TWVariants', {\n    reverse: true\n  })], [getDictionary('TWPhrasesIT', {\n    reverse: true\n  }), getDictionary('TWPhrasesName', {\n    reverse: true\n  }), getDictionary('TWPhrasesOther', {\n    reverse: true\n  })], [getDictionary('TSPhrases'), getDictionary('TSCharacters')]]);\n};\n\nfunction translate(text, dictionary) {\n  const maxLength = Object.keys(dictionary).reduce((maxLength, word) => Math.max(maxLength, word.length), 0);\n  const translated = [];\n\n  for (let i = 0, {\n    length\n  } = text; i < length; i++) {\n    let found;\n\n    for (let j = maxLength; j > 0; j--) {\n      const target = text.substr(i, j);\n\n      if (Object.hasOwnProperty.call(dictionary, target)) {\n        i += j - 1;\n        translated.push(dictionary[target]);\n        found = 1;\n        break;\n      }\n    }\n\n    !found && translated.push(text[i]);\n  }\n\n  return translated.join('');\n}","map":{"version":3,"sources":["/Users/dianjin/Documents/revolutionarychinese.github.io/node_modules/node-opencc/lib/index.js"],"names":["fs","require","path","dictionaries","cachedDictionaries","getDictionary","name","options","reverse","cacheName","dictionary","reduce","map","entry","first","convertChain","input","chains","chain","slice","splice","translate","Object","assign","apply","exports","hongKongToSimplified","text","simplifiedToHongKong","simplifiedToTraditional","simplifiedToTaiwan","simplifiedToTaiwanWithPhrases","traditionalToHongKong","traditionalToSimplified","traditionalToTaiwan","taiwanToSimplified","taiwanToSimplifiedWithPhrases","maxLength","keys","word","Math","max","length","translated","i","found","j","target","substr","hasOwnProperty","call","push","join"],"mappings":"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","sourcesContent":["'use strict';\r\n\r\nconst fs            = require('fs');\r\nconst path          = require('path');\r\nconst dictionaries  = require('../dist/dictionary.json');\r\n\r\nconst cachedDictionaries = {};\r\n\r\nfunction getDictionary(name, options = {}) {\r\n  const { reverse } = options;\r\n  let cacheName     = reverse ? `R_${ name }` : name;\r\n  let dictionary    = cachedDictionaries[cacheName];\r\n\r\n  return dictionary || (cachedDictionaries[cacheName] = dictionaries[name].reduce((map, entry) => {\r\n    const first = options.reverse ? 1 : 0;\r\n\r\n    map[entry[first]] = entry[1 - first];\r\n\r\n    return map;\r\n  }, {}));\r\n}\r\n\r\nfunction convertChain(input, chains) {\r\n  return chains.reduce((input, chain) => {\r\n    const dictionaries = chain.slice();\r\n\r\n    dictionaries.splice(0, 0, {});\r\n\r\n    return translate(input, Object.assign.apply(null, dictionaries));\r\n  }, input);\r\n}\r\n\r\nexports.hongKongToSimplified = function (text) {\r\n  return convertChain(text, [\r\n    [\r\n      getDictionary('HKVariantsRevPhrases'),\r\n      getDictionary('HKVariants', { reverse: true })\r\n    ],\r\n    [\r\n      getDictionary('TSPhrases'),\r\n      getDictionary('TSCharacters')\r\n    ],\r\n  ]);\r\n};\r\n\r\nexports.simplifiedToHongKong = function (text) {\r\n  return convertChain(text, [\r\n    [\r\n      getDictionary('STPhrases'),\r\n      getDictionary('STCharacters')\r\n    ],\r\n    [\r\n      getDictionary('HKVariantsPhrases'),\r\n      getDictionary('HKVariants')\r\n    ]\r\n  ]);\r\n};\r\n\r\nexports.simplifiedToTraditional = function (text) {\r\n  return convertChain(text, [\r\n    [\r\n      getDictionary('STPhrases'),\r\n      getDictionary('STCharacters')\r\n    ]\r\n  ]);\r\n};\r\n\r\nexports.simplifiedToTaiwan = function (text) {\r\n  return convertChain(text, [\r\n    [\r\n      getDictionary('STPhrases'),\r\n      getDictionary('STCharacters')\r\n    ],\r\n    [\r\n      getDictionary('TWVariants')\r\n    ]\r\n  ]);\r\n};\r\n\r\nexports.simplifiedToTaiwanWithPhrases = function (text) {\r\n  return convertChain(text, [\r\n    [\r\n      getDictionary('STPhrases'),\r\n      getDictionary('STCharacters')\r\n    ],\r\n    [\r\n      getDictionary('TWPhrasesIT'),\r\n      getDictionary('TWPhrasesName'),\r\n      getDictionary('TWPhrasesOther'),\r\n      getDictionary('TWVariants')\r\n    ]\r\n  ]);\r\n};\r\n\r\nexports.traditionalToHongKong = function (text) {\r\n  return convertChain(text, [\r\n    [\r\n      getDictionary('HKVariants')\r\n    ]\r\n  ]);\r\n};\r\n\r\nexports.traditionalToSimplified = function (text) {\r\n  return convertChain(text, [\r\n    [\r\n      getDictionary('TSPhrases'),\r\n      getDictionary('TSCharacters')\r\n    ]\r\n  ]);\r\n};\r\n\r\nexports.traditionalToTaiwan = function (text) {\r\n  return convertChain(text, [\r\n    [\r\n      getDictionary('TWVariants')\r\n    ]\r\n  ]);\r\n};\r\n\r\nexports.taiwanToSimplified = function (text) {\r\n  return convertChain(text, [\r\n    [\r\n      getDictionary('TWVariantsRevPhrases'),\r\n      getDictionary('TWVariants', { reverse: true })\r\n    ],\r\n    [\r\n      getDictionary('TSPhrases'),\r\n      getDictionary('TSCharacters')\r\n    ]\r\n  ]);\r\n};\r\n\r\nexports.taiwanToSimplifiedWithPhrases = function (text) {\r\n  return convertChain(text, [\r\n    [\r\n      getDictionary('TWVariantsRevPhrases'),\r\n      getDictionary('TWVariants', { reverse: true })\r\n    ],\r\n    [\r\n      getDictionary('TWPhrasesIT', { reverse: true }),\r\n      getDictionary('TWPhrasesName', { reverse: true }),\r\n      getDictionary('TWPhrasesOther', { reverse: true })\r\n    ],\r\n    [\r\n      getDictionary('TSPhrases'),\r\n      getDictionary('TSCharacters')\r\n    ]\r\n  ]);\r\n};\r\n\r\nfunction translate(text, dictionary) {\r\n  const maxLength  = Object.keys(dictionary).reduce((maxLength, word) => Math.max(maxLength, word.length), 0);\r\n  const translated = [];\r\n\r\n  for (let i = 0, { length } = text; i < length; i++) {\r\n    let found;\r\n\r\n    for (let j = maxLength; j > 0; j--) {\r\n      const target = text.substr(i, j);\r\n\r\n      if (Object.hasOwnProperty.call(dictionary, target)) {\r\n        i += j - 1;\r\n        translated.push(dictionary[target]);\r\n        found = 1;\r\n        break;\r\n      }\r\n    }\r\n\r\n    !found && translated.push(text[i]);\r\n  }\r\n\r\n  return translated.join('');\r\n}\r\n"]},"metadata":{},"sourceType":"script"}