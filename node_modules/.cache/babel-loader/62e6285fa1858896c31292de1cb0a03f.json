{"ast":null,"code":"\"use strict\";\n\nconst assign = require(\"object-assign\"); // XXX: Symbol when web support.\n\n\nconst PINYIN_STYLE = {\n  NORMAL: 0,\n  // 普通风格，不带声调。\n  TONE: 1,\n  // 标准风格，声调在韵母的第一个字母上。\n  TONE2: 2,\n  // 声调以数字形式在拼音之后，使用数字 0~4 标识。\n  TO3NE: 5,\n  // 声调以数字形式在声母之后，使用数字 0~4 标识。\n  INITIALS: 3,\n  // 仅需要声母部分。\n  FIRST_LETTER: 4 // 仅保留首字母。\n\n};\nconst DEFAULT_OPTIONS = {\n  style: PINYIN_STYLE.TONE,\n  // 风格\n  segment: false,\n  // 分词。\n  heteronym: false // 多音字\n\n}; // 声母表。\n\nconst INITIALS = \"b,p,m,f,d,t,n,l,g,k,h,j,q,x,r,zh,ch,sh,z,c,s\".split(\",\"); // 韵母表。\n//const FINALS = \"ang,eng,ing,ong,an,en,in,un,er,ai,ei,ui,ao,ou,iu,ie,ve,a,o,e,i,u,v\".split(\",\");\n// 带声调字符。\n\nconst PHONETIC_SYMBOL = require(\"./phonetic-symbol\");\n\nconst RE_PHONETIC_SYMBOL = new RegExp(\"([\" + Object.keys(PHONETIC_SYMBOL).join(\"\") + \"])\", \"g\");\nconst RE_TONE2 = /([aeoiuvnm])([0-4])$/;\n/*\n * 格式化拼音为声母（Initials）形式。\n * @param {String}\n * @return {String}\n */\n\nfunction initials(pinyin) {\n  for (let i = 0, l = INITIALS.length; i < l; i++) {\n    if (pinyin.indexOf(INITIALS[i]) === 0) {\n      return INITIALS[i];\n    }\n  }\n\n  return \"\";\n}\n\nclass Pinyin {\n  constructor(dict) {\n    this._dict = dict;\n  } // @param {String} hans 要转为拼音的目标字符串（汉字）。\n  // @param {Object} options, 可选，用于指定拼音风格，是否启用多音字。\n  // @return {Array} 返回的拼音列表。\n\n\n  convert(hans, options) {\n    if (typeof hans !== \"string\") {\n      return [];\n    }\n\n    options = assign({}, DEFAULT_OPTIONS, options);\n    let pys = [];\n    let nohans = \"\";\n\n    for (let i = 0, firstCharCode, words, l = hans.length; i < l; i++) {\n      words = hans[i];\n      firstCharCode = words.charCodeAt(0);\n\n      if (this._dict[firstCharCode]) {\n        // ends of non-chinese words.\n        if (nohans.length > 0) {\n          pys.push([nohans]);\n          nohans = \"\"; // reset non-chinese words.\n        }\n\n        pys.push(this.single_pinyin(words, options));\n      } else {\n        nohans += words;\n      }\n    } // 清理最后的非中文字符串。\n\n\n    if (nohans.length > 0) {\n      pys.push([nohans]);\n      nohans = \"\"; // reset non-chinese words.\n    }\n\n    return pys;\n  } // 单字拼音转换。\n  // @param {String} han, 单个汉字\n  // @return {Array} 返回拼音列表，多音字会有多个拼音项。\n\n\n  single_pinyin(han, options) {\n    if (typeof han !== \"string\") {\n      return [];\n    }\n\n    if (han.length !== 1) {\n      return this.single_pinyin(han.charAt(0), options);\n    }\n\n    let hanCode = han.charCodeAt(0);\n\n    if (!this._dict[hanCode]) {\n      return [han];\n    }\n\n    let pys = this._dict[hanCode].split(\",\");\n\n    if (!options.heteronym) {\n      return [Pinyin.toFixed(pys[0], options.style)];\n    } // 临时存储已存在的拼音，避免多音字拼音转换为非注音风格出现重复。\n\n\n    let py_cached = {};\n    let pinyins = [];\n\n    for (let i = 0, py, l = pys.length; i < l; i++) {\n      py = Pinyin.toFixed(pys[i], options.style);\n\n      if (py_cached.hasOwnProperty(py)) {\n        continue;\n      }\n\n      py_cached[py] = py;\n      pinyins.push(py);\n    }\n\n    return pinyins;\n  }\n  /**\n   * 格式化拼音风格。\n   *\n   * @param {String} pinyin TONE 风格的拼音。\n   * @param {ENUM} style 目标转换的拼音风格。\n   * @return {String} 转换后的拼音。\n   */\n\n\n  static toFixed(pinyin, style) {\n    let tone = \"\"; // 声调。\n\n    let first_letter;\n    let py;\n\n    switch (style) {\n      case PINYIN_STYLE.INITIALS:\n        return initials(pinyin);\n\n      case PINYIN_STYLE.FIRST_LETTER:\n        first_letter = pinyin.charAt(0);\n\n        if (PHONETIC_SYMBOL.hasOwnProperty(first_letter)) {\n          first_letter = PHONETIC_SYMBOL[first_letter].charAt(0);\n        }\n\n        return first_letter;\n\n      case PINYIN_STYLE.NORMAL:\n        return pinyin.replace(RE_PHONETIC_SYMBOL, function ($0, $1_phonetic) {\n          return PHONETIC_SYMBOL[$1_phonetic].replace(RE_TONE2, \"$1\");\n        });\n\n      case PINYIN_STYLE.TO3NE:\n        return pinyin.replace(RE_PHONETIC_SYMBOL, function ($0, $1_phonetic) {\n          return PHONETIC_SYMBOL[$1_phonetic];\n        });\n\n      case PINYIN_STYLE.TONE2:\n        py = pinyin.replace(RE_PHONETIC_SYMBOL, function ($0, $1) {\n          // 声调数值。\n          tone = PHONETIC_SYMBOL[$1].replace(RE_TONE2, \"$2\");\n          return PHONETIC_SYMBOL[$1].replace(RE_TONE2, \"$1\");\n        });\n        return py + tone;\n\n      case PINYIN_STYLE.TONE:\n      default:\n        return pinyin;\n    }\n  }\n  /**\n   * 比较两个汉字转成拼音后的排序顺序，可以用作默认的拼音排序算法。\n   *\n   * @param {String} hanA 汉字字符串 A。\n   * @return {String} hanB 汉字字符串 B。\n   * @return {Number} 返回 -1，0，或 1。\n   */\n\n\n  compare(hanA, hanB) {\n    const pinyinA = this.convert(hanA, DEFAULT_OPTIONS);\n    const pinyinB = this.convert(hanB, DEFAULT_OPTIONS);\n    return String(pinyinA).localeCompare(String(pinyinB));\n  }\n\n  static get STYLE_NORMAL() {\n    return PINYIN_STYLE.NORMAL;\n  }\n\n  static get STYLE_TONE() {\n    return PINYIN_STYLE.TONE;\n  }\n\n  static get STYLE_TONE2() {\n    return PINYIN_STYLE.TONE2;\n  }\n\n  static get STYLE_TO3NE() {\n    return PINYIN_STYLE.TO3NE;\n  }\n\n  static get STYLE_INITIALS() {\n    return PINYIN_STYLE.INITIALS;\n  }\n\n  static get STYLE_FIRST_LETTER() {\n    return PINYIN_STYLE.FIRST_LETTER;\n  }\n\n  static get DEFAULT_OPTIONS() {\n    return DEFAULT_OPTIONS;\n  }\n\n}\n\nmodule.exports = Pinyin;","map":{"version":3,"sources":["/Users/dianjin/Documents/revolutionarychinese.github.io/node_modules/pinyin/lib/pinyin.js"],"names":["assign","require","PINYIN_STYLE","NORMAL","TONE","TONE2","TO3NE","INITIALS","FIRST_LETTER","DEFAULT_OPTIONS","style","segment","heteronym","split","PHONETIC_SYMBOL","RE_PHONETIC_SYMBOL","RegExp","Object","keys","join","RE_TONE2","initials","pinyin","i","l","length","indexOf","Pinyin","constructor","dict","_dict","convert","hans","options","pys","nohans","firstCharCode","words","charCodeAt","push","single_pinyin","han","charAt","hanCode","toFixed","py_cached","pinyins","py","hasOwnProperty","tone","first_letter","replace","$0","$1_phonetic","$1","compare","hanA","hanB","pinyinA","pinyinB","String","localeCompare","STYLE_NORMAL","STYLE_TONE","STYLE_TONE2","STYLE_TO3NE","STYLE_INITIALS","STYLE_FIRST_LETTER","module","exports"],"mappings":"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","sourcesContent":["\"use strict\";\n\nconst assign = require(\"object-assign\");\n// XXX: Symbol when web support.\nconst PINYIN_STYLE = {\n  NORMAL: 0,       // 普通风格，不带声调。\n  TONE: 1,         // 标准风格，声调在韵母的第一个字母上。\n  TONE2: 2,        // 声调以数字形式在拼音之后，使用数字 0~4 标识。\n  TO3NE: 5,        // 声调以数字形式在声母之后，使用数字 0~4 标识。\n  INITIALS: 3,     // 仅需要声母部分。\n  FIRST_LETTER: 4, // 仅保留首字母。\n};\nconst DEFAULT_OPTIONS = {\n  style: PINYIN_STYLE.TONE, // 风格\n  segment: false,           // 分词。\n  heteronym: false,         // 多音字\n};\n\n// 声母表。\nconst INITIALS = \"b,p,m,f,d,t,n,l,g,k,h,j,q,x,r,zh,ch,sh,z,c,s\".split(\",\");\n// 韵母表。\n//const FINALS = \"ang,eng,ing,ong,an,en,in,un,er,ai,ei,ui,ao,ou,iu,ie,ve,a,o,e,i,u,v\".split(\",\");\n// 带声调字符。\nconst PHONETIC_SYMBOL = require(\"./phonetic-symbol\");\nconst RE_PHONETIC_SYMBOL = new RegExp(\"([\" + Object.keys(PHONETIC_SYMBOL).join(\"\") + \"])\", \"g\");\nconst RE_TONE2 = /([aeoiuvnm])([0-4])$/;\n\n/*\n * 格式化拼音为声母（Initials）形式。\n * @param {String}\n * @return {String}\n */\nfunction initials(pinyin) {\n  for (let i = 0, l = INITIALS.length; i < l; i++){\n    if (pinyin.indexOf(INITIALS[i]) === 0) {\n      return INITIALS[i];\n    }\n  }\n  return \"\";\n}\n\nclass Pinyin {\n  constructor (dict) {\n    this._dict = dict;\n  }\n\n  // @param {String} hans 要转为拼音的目标字符串（汉字）。\n  // @param {Object} options, 可选，用于指定拼音风格，是否启用多音字。\n  // @return {Array} 返回的拼音列表。\n  convert (hans, options) {\n\n    if (typeof hans !== \"string\") {\n      return [];\n    }\n\n    options = assign({}, DEFAULT_OPTIONS, options);\n\n    let pys = [];\n    let nohans = \"\";\n\n    for(let i = 0, firstCharCode, words, l = hans.length; i < l; i++){\n\n      words = hans[i];\n      firstCharCode = words.charCodeAt(0);\n\n      if(this._dict[firstCharCode]){\n\n        // ends of non-chinese words.\n        if(nohans.length > 0){\n          pys.push([nohans]);\n          nohans = \"\"; // reset non-chinese words.\n        }\n\n        pys.push(this.single_pinyin(words, options));\n\n      }else{\n        nohans += words;\n      }\n    }\n\n    // 清理最后的非中文字符串。\n    if(nohans.length > 0){\n      pys.push([nohans]);\n      nohans = \"\"; // reset non-chinese words.\n    }\n    return pys;\n  }\n\n  // 单字拼音转换。\n  // @param {String} han, 单个汉字\n  // @return {Array} 返回拼音列表，多音字会有多个拼音项。\n  single_pinyin (han, options) {\n\n    if (typeof han !== \"string\") {\n      return [];\n    }\n    if (han.length !== 1) {\n      return this.single_pinyin(han.charAt(0), options);\n    }\n\n    let hanCode = han.charCodeAt(0);\n\n    if (!this._dict[hanCode]) {\n      return [han];\n    }\n\n    let pys = this._dict[hanCode].split(\",\");\n    if(!options.heteronym){\n      return [Pinyin.toFixed(pys[0], options.style)];\n    }\n\n    // 临时存储已存在的拼音，避免多音字拼音转换为非注音风格出现重复。\n    let py_cached = {};\n    let pinyins = [];\n    for(let i = 0, py, l = pys.length; i < l; i++){\n      py = Pinyin.toFixed(pys[i], options.style);\n      if(py_cached.hasOwnProperty(py)){\n        continue;\n      }\n      py_cached[py] = py;\n\n      pinyins.push(py);\n    }\n    return pinyins;\n  }\n\n  /**\n   * 格式化拼音风格。\n   *\n   * @param {String} pinyin TONE 风格的拼音。\n   * @param {ENUM} style 目标转换的拼音风格。\n   * @return {String} 转换后的拼音。\n   */\n  static toFixed (pinyin, style) {\n    let tone = \"\"; // 声调。\n    let first_letter;\n    let py;\n    switch(style){\n    case PINYIN_STYLE.INITIALS:\n      return initials(pinyin);\n\n    case PINYIN_STYLE.FIRST_LETTER:\n      first_letter = pinyin.charAt(0);\n      if (PHONETIC_SYMBOL.hasOwnProperty(first_letter)) {\n        first_letter = PHONETIC_SYMBOL[first_letter].charAt(0);\n      }\n      return first_letter;\n\n    case PINYIN_STYLE.NORMAL:\n      return pinyin.replace(RE_PHONETIC_SYMBOL, function($0, $1_phonetic){\n        return PHONETIC_SYMBOL[$1_phonetic].replace(RE_TONE2, \"$1\");\n      });\n\n    case PINYIN_STYLE.TO3NE:\n      return pinyin.replace(RE_PHONETIC_SYMBOL, function($0, $1_phonetic){\n        return PHONETIC_SYMBOL[$1_phonetic];\n      });\n\n    case PINYIN_STYLE.TONE2:\n      py = pinyin.replace(RE_PHONETIC_SYMBOL, function($0, $1){\n        // 声调数值。\n        tone = PHONETIC_SYMBOL[$1].replace(RE_TONE2, \"$2\");\n\n        return PHONETIC_SYMBOL[$1].replace(RE_TONE2, \"$1\");\n      });\n      return py + tone;\n\n    case PINYIN_STYLE.TONE:\n    default:\n      return pinyin;\n    }\n  }\n\n  /**\n   * 比较两个汉字转成拼音后的排序顺序，可以用作默认的拼音排序算法。\n   *\n   * @param {String} hanA 汉字字符串 A。\n   * @return {String} hanB 汉字字符串 B。\n   * @return {Number} 返回 -1，0，或 1。\n   */\n  compare (hanA, hanB) {\n    const pinyinA = this.convert(hanA, DEFAULT_OPTIONS);\n    const pinyinB = this.convert(hanB, DEFAULT_OPTIONS);\n    return String(pinyinA).localeCompare(String(pinyinB));\n  }\n\n  static get STYLE_NORMAL () {\n    return PINYIN_STYLE.NORMAL;\n  }\n  static get STYLE_TONE () {\n    return PINYIN_STYLE.TONE;\n  }\n  static get STYLE_TONE2 () {\n    return PINYIN_STYLE.TONE2;\n  }\n  static get STYLE_TO3NE () {\n    return PINYIN_STYLE.TO3NE;\n  }\n  static get STYLE_INITIALS () {\n    return PINYIN_STYLE.INITIALS;\n  }\n  static get STYLE_FIRST_LETTER () {\n    return PINYIN_STYLE.FIRST_LETTER;\n  }\n  static get DEFAULT_OPTIONS () {\n    return DEFAULT_OPTIONS;\n  }\n}\n\nmodule.exports = Pinyin;\n"]},"metadata":{},"sourceType":"script"}